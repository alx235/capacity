MAIN thread finish before child=>UB

Source where strong gurantee external function forbid compiler reordering (e.g. mutex.lock()/unlock())???

!!!std::bind need std::(c)ref to pass by ref,like std::thread's function args

lvalue (named object or a function/operator returning lvalue reference)

Rvalue references can be used to extend the lifetimes of Temporary! objects
	(note, lvalue references to const can extend the lifetimes of temporary objects too,
	but they are not modifiable through them
	and they must be local-http://stackoverflow.com/questions/2784262/does-a-const-reference-prolong-the-life-of-a-temporary)
http://en.cppreference.com/w/cpp/language/reference
	Temporary object: return T; and...
		http://en.cppreference.com/w/cpp/language/lifetime
		http://stackoverflow.com/questions/10897799/temporary-objects-when-are-they-created-how-do-you-recognise-them-in-code

if destroyed mutex accessed by thread=>UB

Constructor convertable if at least one without default value param exist(until c++11) and without explicit function-specifier

Strong exception guarantee - keep container state before call that throw
pointer increase on a <=> implicit increase pointer on a*sizeof(T) 
	*int* p=((int*)3+3); 
	pointer store: 3+3*sizeof(int)
The following operations are always O(1) (depends on impl.) when they exist:
	begin(), end()
	empty()
	size() (note that list::size() was not necessarily O(1) prior to C++11) not constant in SGI
	push_front() (note that std::vector does not have push_front(), as it would not be O(1))
	push_back()

() {} default value explicit init for dynamic/stack array

!std::swap(const& T a,const& T b){ tmp(a),a=b,b=tmp} it is not always effective!
STD::VECTOR - when erase/clear it call ONLY dtor when
	~vector/shink_to_fit(std::vector<T>(v).swap(v);)/real_clear(std::vector<T>().swap(v);)
	than call deallocate(not call dtor) and dtors for elements which haven't been erased
	So vector divide destroy objects and storage deallocation
STD::VECTOR reserve free space at the end, STD::DEQUE additionaly reserve at the begin

C++ allows arbitrary order of evaluation of inner expressions (e.g.: more than 1 arg can cause leak,f(shared_ptr(new..),g())

C++11: pass param by value copy-ctor if arg is lvaule or move-ctor if arg is rvaule
!Returning reference or pointer to a local variable is undefined behavior
C++11: move ctor http://en.cppreference.com/w/cpp/language/move_constructor
C++11: Not use std::move to move standart automatic objects out of functions (compiler CAN optimize if you not use),
	with except return ref (because NRVO not allowed with ref)
	there is no clear answer when (not)use
C++11: std::move for move lvalue->xvalue(rvaule), it's just static cust to rvalue, it's not "move" anything 
C++11: move ctor auto selected for temporary object (make prvalue) (+with implicit conversion)
C++11: !move constructor should not throw
C++11:: !Forwarding references for tempate function with strong rvaule required

C++11(?): dtor exception under stack => std::terminate

C++11: std::MAKE_SHARED can be more safely and efficiently (singe allocation instead double for shared_ptr)
	than std::shared_ptr<T>()
	std::MAKE_SHARED allocate once block control and managed data (that way it's safely)
	std::shared_ptr<T>(raw_ptr_that_already_managed_by_another_shared_prt) - UB
ะก++11: static_assert(std::is_base_of<Base, T1>::value, "T1 must derive from Base");
	(before c++11):typedef int static_assert_something[something ? 1 : -1]

Requirements for Container Elements (C++98?) (http://www.ccplusplus.com/2014/01/stl-container-element-c.html):
- An element must be copyable by a copy constructor
- An element must be assignable by the assignment operator
- An element must be destroyable by a destructor

auto_ptr:
	The C++ Standard says that an STL element must be "copy-constructible" and "assignable."
	In other words, an element must be able to be assigned or copied and the two elements are logically independent
	
	Specifically, copying one auto_ptr to another does not create
	two equal objects since one has lost its ownership of the pointer.
		std::auto_ptr<X> pX = vecX[0];  // vecX[0] is assigned NULL.

Inheritance visible case:

private inh.:
Base members that were protected, public, became private in Derived.
protected inh.:
Base members that were protected, public, became protected in Derived.
public...no comment
default: private for class and public for struct

Enum - http://stackoverflow.com/questions/9630744/should-you-declare-enums-inside-or-outside-a-class.

Copying values means that the STL containers provide value semantics

itearator template wrapper of array Type T.

temporary[implicit conversion] object can't link with Non-Const Reference(only lvalue)
	Non-Const Ref/Pointer can't link with const variable/Ref/Pointer
	Ref can't change linked address after init
	Const Ref can't change it's value, but allowed temporary[implicit conversion]
Pointer store only memory address
	
Pol. run-time: truncation if base b = d (derived); 

    object types with virtual functions are usually implemented in C++ with a per-object pointer
    to a table of virtual functions which is unique to each type
    So, that's why we use ref and pointer.

explicit: (Meyers): use explicit any time when have no reason don't use it.
problem: cost for temporary object, unpredictable complicated implisit cast; including implicit POD type.
/*
class String {
public:
    String(int n); // allocate n bytes to the String object
    String(const char *p); // initializes object with char *p
};
Now if you try

String mystring = 'x';
the char 'x' will be implicitly converted to int and then will call the String(int) constructor. 

  !!!But this is not what the user might have intended. So to prevent such conditions, 
  we shall define the constructor as explicit:

class String {
public:
    explicit String (int n); //allocate n bytes
    String(const char *p); // initialize sobject with string p
};*/

Defaults params are early binding ( at compile time ) , and virtual functions - later, important for def virt func. params.
	so default ll'be early bind defined!

Invoking delete on a pointer not allocated dynamically using new is something called Undefined Behavior

destruction:

~derived
~member derived
~base
~member base

constructor have reverse order.

dynamic lib - load to memory while it not full and has no new(allocation) request. It's binar code (dll,so,etc), run-time
static - compile time binar code, application binar grow, ref undef before compile.
Why? not write&compile every time same code...some time init lib is expensive. 

const and typedef - internal link (C compatibility)
inline must be defined in each translation unit when it declared
external C/{} - link C compatible code (binar), have no influence on call's semantics, but have on type safe, memory/stack loc. etc.
 compiler need .h, linker libs
 - NOT use for diff.
      C++ compilers!!!
      
Preprocessor make macroreplace and insert from include sorces - make translation unit...and check path of sources
Compiler check declaration rule
Linker check other rule and multiple different translation unit
 each declaration (can be separate) must have only one definiton
  BUT:
  ODR: two def mean one if:
   -located in another transl unit
   -identical by lexeme
   -has same mean(typedef) in each transl unit
   
if throw() list of funct except has another type except it cause unexpected() => terminate => abort,
 if exception spec list is empty => no except
  exit() call only static var destr
  abort() ignore all
Fucntion Signature Throw (specif. excep.) call std::unexpected if throw except that not belong to list of except below,
which cal terminate().

CATCH Derived except cancel CATCH of BASE except (in def order).

When a THROW expression is evaluated, an exception object is initialized
 from the value of the expression, ignoring any const and volatile qualifiers.
 For class types this means that copy-initialization is performed
!unnamed throw (throw()) can't be catched by catch(...)

ะก++ no virtual constructor (ONLY VIRTUAL FABRIC METHOD can be declared)
	FABRIC METHOD: definite abstract class with virtual T_BASE* function=0,
		return T_SOME_DERIVED* in override - just interface returning base class pointer.

defenition constant in header file cause effective compilator code

<const_cast>/mutable(const modification member) - allow mod in const member const/var, safe if source originally non-const)

nonlocal static var call constr in def order in bound of translation unit to guaranted out use static flag (keep state)
- first flag use strategy or ...static int x = 0;...
- local static var. init first time (control flow) cross defenition, after call main(...) counter, nonlocal init before,
in all case destructor call after main(..) except some abnormal program complete
	local static POD init before first time control flow cross it, otherwise in cross
	!Allocate and init time are different: alloc in DATA/BSS(undefined when) but CAN init (see below) with delay (or never)
Bound static in class can instant order of ctor, return static local guaranteed comlete init (if no throw in ctor...)
	but they not replace dtor order probem (with relation of local dtors...)
	
Static namespace init followed by dynamic init (dll load, need example!)

FORBIDDEN overload: ::, ., .*, ?;, sizeof, typeid.

Unar/binar oper can be overloaded with non-static member(0,1 argc) or global funct (1, 2 argc),
 local have no precedent this case, unar firs arg CAN'T be POD type

Overload operatos: =,[],(),-> only non-static member;
 () - functional object
 ->defer pointer or iterator

friend mod => function get access only in hide scope of class (example in cpp2,mycontainer)

POSTFIX OVERLOAD operator have signature with int arg, it's value has no mean..., it's only signature and all.

Exception in destructor call terminate() which call abort() - so it bad, because memory will not free.
 alloc memory, constr.
 destr., dealloc memory
 Can be call independently (e.g.:vector,...)


Function() = 0 - pure virtual => abstract class (can't create object)

!!!
it is more efficient to do ++iterator than iterator++ since it avoids an 
unnecessary copy when incrementing
{
 That (post++) function has to create a temporary object for its 
 return value and the implementation above also creates an explicit temporary object that
 has to be constructed and destructed
}
// prefix
CSample& operator++()
{
  // implement increment logic on this instance, return reference to it.
  return *this;
}

// postfix
// create,copy,destroy (since local stack) temporary object
// seems expensive...yes?
CSample operator++(int)
{
  CSample tmp(*this); 
  operator++(); // prefix-increment this instance
  return tmp;   // return value before increment
}

COMPILER CAN DETERMINE PARAM TYPE by ARG TYPE RESPECTIVILY

INSTANTIATION POINT TEMPLATE - FIRST DEFENITE PARAM TYPE
 CLASS C=CHAR => WE CAN OMIT PARAM TYPE IN INSTANTIATION

MORE SPECIAL TEMPLATE VERSION HAS PRIOR FOR DECLAR OBJ, POINTER
 AND OVERLOAD RESOLUTION, PARTIAL SPECIALIZATION MUST!!! BE ABOVE COMPLETE=>
 ORDER IMPORTANT!!!
 ORDER: common,
 	partial spec. (where after class declare special case: template<T> class A<T*>),
 	complete spec. (without any type params: template<>class A<void*>
 PARTIAL SPECIALIZATION for template function is FORBID
 +CLASS AND TYPENAME ARE EQUAL KEYWORD!

COMPILE-TIME(PARAMETRIC) POLYMORPHISM - TEMPLATE AND INHERITANCE
RUN-TIME POLYMORPHISM - VIRTUAL FUNCTION AND OBJECT INHERITANCE

IN GENERAL, GENERIC FROM ONE TEMPLATE 2 TYPES HAVE NO REFERENCE.

DECLARE USING INSIDE CLASS USE FOR OVERLOAD BASE OR DERIVED MEMBERS.

dynamic_cast<T*>(D*): downcast(if inheritance), upcast and crosscast need polymorthic type D, if fail =0
 for & => bad_cast exception
 for virtual base (multiple inheritance) can be ambiguity (what object???)
 dynamic_cast<void*>(D*) give adress of object beginning (pol. type)
 dynamic_cast move at hierarchy to tail, to head
 static_cast - for void* to T* cast/POD type cast
  void* pointer can be used for any standart pointer operation only static_cast?
 const_cast full save only in case when object declare as non-const(volatile)
typeid: return pointer to type info (std type), bad_type if for zero pol type pointer or ref, compil-time value for non-pol type
!!! NEVER use C-style cast !!!
reinterpret_cast for void** and any cast without check guarantee and guarantee of STABLE AND SAFE!


predicat - just function return bool

for_each - cycle alternative

Memory allocator (+d.3.5) is complex and non-trivial topic, need test, experience..so i can't say that it'll done near future.

bit field (int:1(2), bool name:1), or union for save memory do not give guarantee of portability.

Widget w3 = w2; // call copy constructor! (first init)
Forbid copy constr and operator assignment <= inherit from class with private copy constr and operator assignment
Private/Protected/(Default with class) inheritance Forbid cast from derived to base

!Never call virt. function in constructor and destructor - when creating derived object object type is base...so undefined beh
can exist...

use special smart pointer to dynamic array

//ะฟะพะปััะตะฝะธั ะดะพัััะฟะฐ ะบ ัะตััััั ะฒ ะบะพะฝััััะบัะพัะต, ะฐ ะพัะฒะพะฑะพะถะดะตะฝะธั โ ะฒ ะดะตััััะบัะพัะต ัะพะพัะฒะตัััะฒัััะตะณะพ ะบะปะฐััะฐ
+RAII - Resource Acquision is Initialization - forbid copy operations or ref counter//

pointer def value is NOT guarantee be NULL.

deref NULL pointer take no effect.

!Place dynamic object into separate location to avoid memory leaks (just not forget free resource)

+To avoid duplicate code in const/non-const member use const_cast

+Always use const if can, for save...

+Use non-member fuction for case when need cast all params?

+Use init cur val instead of def constr and init...(free processor time)

+VIRTUAL INHERITANCE is very expensive and low!

!User type POD type not use constructor they default value insert (if static and some another condition)
