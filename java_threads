***The topic is very complex this is just short guide
***Read Java Concurrence in Practise

When the interrupt() thread, the interrupted status of the thread is set
  if a thread is blocked by sleep or wait (and below), it throw InterruptedException,
  the opposite is true.
  !  There are blocking I/O calls that cannot be interrupted (Core Java Vol 2)
  ! There is no language requirement that a thread which is interrupted should terminate,
    so you must catch exception
  ! The interrupted() check status and clear it
    
  !!! When only daemon threads remain, the virtual machine exits
  
  Threads can be in one of six states:
  • New• Runnable• Blocked• Waiting• Timed waiting• Terminated
  
    1) When you create a thread with the new operator—for example, new Thread(r)—the thread is not yet running.
      
    2) Once you invoke the start method, the thread is in the runnable state.
      A runnable thread may or may not actually be Running
      
    !!  Preemptive scheduling systems give each runnable thread a slice of time to perform its task (but need sleep,etc...
        to another run) when selecting the next thread, the operating system takes into account the thread priorities
        (Highly System-Dependent).
  
    !!! When a thread is Blocked or Waiting (Timed waiting?),
        it consumes minimal resources (not SURE).
        It is up to the thread scheduler to reactivate it.
        
        When the thread tries to lock
          (but not a Lock in the java.util.concurrent library) that is currently held by another thread,
          it becomes Blocked until helded.
          
        When the thread waits for another thread to notify the scheduler of a condition,
          it enters the Waiting state
          This happens by calling the:
            Object.wait or
            Thread.join method, or
            by waiting for a Lock or
            Condition in the java.util.concurrent library
            
          Calling methods below enter the Timed Waiting state:
          (This state persists either until the timeout expires or the appropriate notification has been received)
            Methods with timeout include Thread.sleep and the timed versions of:
            Object.wait,
            Thread.join,
            Lock.tryLock,
            and Condition.await.
        
  Thead termination:
    end
    exception
      
